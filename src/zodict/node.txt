Node
====

Abstract _Node, subclasses need to implement _node_impl and subclass it
::
    >>> from zodict.node import _Node
    >>> node = _Node()

# XXX: see comment in _Node.__init__
#    Traceback (most recent call last):
#    ...
#    TypeError: super() argument 1 must be type, not None

    >>> class MyNode(_Node, dict):
    ...     def _node_impl(self):
    ...         return dict
    >>> node = MyNode()
    >>> del node


We have a base node which provides the default interface implementation.
::
    >>> from zodict import Zodict
    >>> from zodict.interfaces import INode
    >>> from zodict import Node
    >>> root = Node('root')
    >>> root
    <Node object 'root' at ...>

    >>> INode.providedBy(root)
    True
    
    >>> from odict import odict
    >>> from guppy import hpy
    >>> h = hpy()
    >>> print h.iso(Node(), Zodict(), odict(), dict())
    Partition of a set of 4 objects. Total size = 1168 bytes.
     Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
         0      1  25      296  25       296  25 node.bbb.Node
         1      1  25      296  25       592  51 node.utils.Zodict
         2      1  25      296  25       888  76 odict.pyodict.odict
         3      1  25      280  24      1168 100 dict (no owner)

Location related attributes.
::
    >>> root.__name__
    'root'

    >>> root.__parent__

    >>> root.path
    ['root']

The Node object provides an index. This makes it possible to access each Node
in tree via it's uuid. Indexing is enabled by default, you can disable it by
passing ``index=False`` to the constructor.
::
    >>> root.index
    <node.bbb.NodeIndex object at ...>

    >>> unindexednode = Node('foo', index=False)
    >>> unindexednode.index
    Traceback (most recent call last):
      ...
    AttributeError: No index support configured on this Node.

Tree node index.
::

    >>> root.index
    <node.bbb.NodeIndex object at ...>

    >>> from zope.interface.common.mapping import IReadMapping
    >>> IReadMapping.providedBy(root.index)
    True

    >>> root.index[root.uuid]
    <Node object 'root' at ...>

    >>> root.index.get(root.uuid)
    <Node object 'root' at ...>

    >>> root.uuid in root.index
    True

    >>> len(root.index._index)
    1

Add some children and check node containment stuff.
::
    >>> root['child'] = Node()
    >>> root['child'].path
    ['root', 'child']

    >>> root.index._index is root['child'].index._index
    True

    >>> len(root.index._index)
    2

    >>> root['child']['subchild'] = Node()
    >>> root['child']['subchild'].path
    ['root', 'child', 'subchild']

    >>> len(root.index._index)
    3

    >>> root['child']['subchild2'] = Node()
    >>> root.keys()
    ['child']

    >>> len(root.index._index)
    4

    # Non-Node "child" is not indexed
    >>> root['child']['subchild3'] = 1
    Traceback (most recent call last):
    ...
    ValueError: Non-node childs are not allowed.

    >>> root['child'].allow_non_node_childs = True
    >>> root['child']['subchild3'] = 1
    >>> root['child']['subchild3']
    1

    >>> len(root.index._index)
    4

    >>> root['child'].keys()
    ['subchild', 'subchild2', 'subchild3']

    >>> root['child'].items()
    [('subchild', <Node object 'subchild' at ...>),
    ('subchild2', <Node object 'subchild2' at ...>),
    ('subchild3', 1)]

    >>> child = root['child']
    >>> child.__name__
    'child'

    >>> child.__parent__
    <Node object 'root' at ...>

    >>> len(root['child'].keys())
    3

    >>> root.printtree()
    <class 'node.bbb.Node'>: root
      <class 'node.bbb.Node'>: child
        <class 'node.bbb.Node'>: subchild
        <class 'node.bbb.Node'>: subchild2
      1

Adding in indexed Node with same uuid or the same node twice fails.
::
    >>> child = root['child']
    >>> root['child2'] = child
    Traceback (most recent call last):
      ...
    ValueError: Node with uuid already exists

Delete non-extistent key
::
    >>> del root['non-existent']
    Traceback (most recent call last):
    ...
    KeyError: 'non-existent'


Node uses ``ILocation``, so attribute ``__name__`` is set. A python class object
itself uses this attribute too, here it stores the class name. If you set a
class derived from Node (others would be catched earlier) as a value in a Node
you'd get odd effects, so we don't allow it!
::
    >>> class SomeClass(Node):
    ...     """for testing"""
    >>> root['aclasshere'] = SomeClass
    Traceback (most recent call last):
      ...
    ValueError: It isn't allowed to use classes as values.

Test filtereditems function.
::
    >>> from zope.interface import Interface
    >>> from zope.interface import alsoProvides
    >>> class IMarker(Interface): pass
    >>> alsoProvides(root['child']['subchild'], IMarker)
    >>> IMarker.providedBy(root['child']['subchild'])
    True

    >>> for item in root['child'].filtereditems(IMarker):
    ...     print item.path
    ['root', 'child', 'subchild']

Check UUID stuff.
::
    >>> len(root._index.keys())
    4

    >>> uuid = root['child']['subchild'].uuid
    >>> uuid
    UUID('...')

    >>> root.node(uuid).path
    ['root', 'child', 'subchild']

    >>> root.uuid = uuid
    Traceback (most recent call last):
      ...
    ValueError: Given uuid was already used for another Node

    >>> import uuid
    >>> newuuid = uuid.uuid4()

    >>> root.uuid = newuuid
    >>> root['child'].node(newuuid).path
    ['root']

    >>> len(root._index.keys())
    4

Store the uuids of the nodes which are expected to be deleted from index if
child is deleted.
::
    >>> delindexes = [
    ...     int(root['child'].uuid),
    ...     int(root['child']['subchild'].uuid),
    ...     int(root['child']['subchild2'].uuid),
    ... ]

Read the uuid index and check containment in index.
::
    >>> iuuids = root._index.keys()
    >>> len(iuuids)
    4

    >>> delindexes[0] in iuuids
    True

    >>> delindexes[1] in iuuids
    True

    >>> delindexes[2] in iuuids
    True

Delete child. All checked uuids above must be deleted from index.
::
    >>> del root['child']
    >>> root.keys()
    []

    >>> uuids = root._index.keys()
    >>> len(uuids)
    1

    >>> root.index[root.uuid] is root
    True

    >>> delindexes[0] in uuids
    False

    >>> delindexes[1] in uuids
    False

    >>> delindexes[2] in uuids
    False

    >>> root.printtree()
    <class 'node.bbb.Node'>: root

Node insertion. There exist an ``insertbefore`` and ``insertafter`` function.
::
    >>> root['child1'] = Node()
    >>> root['child2'] = Node()
    >>> root.printtree()
    <class 'node.bbb.Node'>: root
      <class 'node.bbb.Node'>: child1
      <class 'node.bbb.Node'>: child2

    >>> node = Node()
    >>> root.insertbefore(node, root['child1'])
    Traceback (most recent call last):
      ...
    ValueError: Given node has no __name__ set.

    >>> root.insertbefore(root['child2'], root['child1'])
    Traceback (most recent call last):
      ...
    KeyError: u'Given node already contained in tree.'

    >>> node.__name__ = 'child3'
    >>> root.insertbefore(node, root['child2'])
    >>> root.printtree()
    <class 'node.bbb.Node'>: root
      <class 'node.bbb.Node'>: child1
      <class 'node.bbb.Node'>: child3
      <class 'node.bbb.Node'>: child2

    >>> node = Node('child4')
    >>> root.insertafter(node, root['child3'])
    >>> root.printtree()
    <class 'node.bbb.Node'>: root
      <class 'node.bbb.Node'>: child1
      <class 'node.bbb.Node'>: child3
      <class 'node.bbb.Node'>: child4
      <class 'node.bbb.Node'>: child2

    >>> node = Node('child5')
    >>> root.insertafter(node, root['child2'])
    >>> root.printtree()
    <class 'node.bbb.Node'>: root
      <class 'node.bbb.Node'>: child1
      <class 'node.bbb.Node'>: child3
      <class 'node.bbb.Node'>: child4
      <class 'node.bbb.Node'>: child2
      <class 'node.bbb.Node'>: child5

Move a node. Therefor we first need to detach the node we want to move from
tree. Then insert the detached node elsewhere. In general, you can insert the
detached node or subtree to a complete different tree.
::
    >>> len(root._index.keys())
    6

    >>> node = root.detach('child4')
    >>> node
    <Node object 'child4' at ...>

    >>> len(node._index.keys())
    1
    >>> len(root._index.keys())
    5

    >>> len(root.values())
    4

    >>> root.insertbefore(node, root['child1'])
    >>> root.printtree()
    <class 'node.bbb.Node'>: root
      <class 'node.bbb.Node'>: child4
      <class 'node.bbb.Node'>: child1
      <class 'node.bbb.Node'>: child3
      <class 'node.bbb.Node'>: child2
      <class 'node.bbb.Node'>: child5

Merge 2 Node Trees.
::
    >>> tree1 = Node()
    >>> tree1['a'] = Node()
    >>> tree1['b'] = Node()
    >>> tree2 = Node()
    >>> tree2['d'] = Node()
    >>> tree2['e'] = Node()
    >>> tree1._index is tree2._index
    False

    >>> len(tree1._index.keys())
    3

    >>> tree1.printtree()
    <class 'node.bbb.Node'>: None
      <class 'node.bbb.Node'>: a
      <class 'node.bbb.Node'>: b

    >>> len(tree2._index.keys())
    3

    >>> tree2.printtree()
    <class 'node.bbb.Node'>: None
      <class 'node.bbb.Node'>: d
      <class 'node.bbb.Node'>: e

    >>> tree1['c'] = tree2
    >>> len(tree1._index.keys())
    6

    >> sorted(tree1._index.values(), key=lambda x: x.__name__)

    >>> tree1._index is tree2._index
    True

    >>> tree1.printtree()
    <class 'node.bbb.Node'>: None
      <class 'node.bbb.Node'>: a
      <class 'node.bbb.Node'>: b
      <class 'node.bbb.Node'>: c
        <class 'node.bbb.Node'>: d
        <class 'node.bbb.Node'>: e

Detach subtree and insert elsewhere.
::
    >>> sub = tree1.detach('c')
    >>> sub.printtree()
    <class 'node.bbb.Node'>: c
      <class 'node.bbb.Node'>: d
      <class 'node.bbb.Node'>: e

    >>> tree1._index is sub._index
    False

    >>> sub._index is sub['d']._index is sub['e']._index
    True

    >>> len(sub._index.keys())
    3

    >>> tree1.printtree()
    <class 'node.bbb.Node'>: None
      <class 'node.bbb.Node'>: a
      <class 'node.bbb.Node'>: b

    >>> len(tree1._index.keys())
    3

    >>> sub.__name__ = 'x'
    >>> tree1.insertbefore(sub, tree1['a'])
    >>> tree1.printtree()
    <class 'node.bbb.Node'>: None
      <class 'node.bbb.Node'>: x
        <class 'node.bbb.Node'>: d
        <class 'node.bbb.Node'>: e
      <class 'node.bbb.Node'>: a
      <class 'node.bbb.Node'>: b

    >>> tree1._index is sub._index
    True

    >>> len(tree1._index.keys())
    6

    >>> tree1.insertbefore(sub, tree1['a'])
    Traceback (most recent call last):
      ...
    KeyError: u'Given node already contained in tree.'

Access Node children via AttributeAccess.
::
    >>> attraccess = root.as_attribute_access()
    >>> attraccess.child1
    <Node object 'child1' at ...>

Check AliasedNodespace
----------------------
::
    >>> tree1.keys()
    ['x', 'a', 'b']

    >>> from zodict.node import AliasedNodespace
    >>> aliased_tree1 = AliasedNodespace(tree1)
    >>> aliased_tree1.keys()
    ['x', 'a', 'b']

    >>> from zodict.aliaser import DictAliaser
    >>> aliased_tree1.aliaser = DictAliaser({
    ...     'attr1': 'a',
    ...     'attr2': 'b',
    ...     'newattr': 'notthereyet',
    ... })

    >>> aliased_tree1['attr1']
    <Node object 'a' at ...>

    >>> aliased_tree1['attr2']
    <Node object 'b' at ...>

    >>> aliased_tree1['a']
    Traceback (most recent call last):
    ...
    KeyError: 'a'

    >>> 'attr1' in aliased_tree1
    True

    >>> 'a' in aliased_tree1
    False

If only an alias exists but the underlaying attr does not exist: KeyError
::
    >>> aliased_tree1['newattr']
    Traceback (most recent call last):
    ...
    KeyError: 'newattr'

    >>> 'newattr' in aliased_tree1
    False

    >>> [x for x in aliased_tree1]
    ['attr1', 'attr2']

    >>> aliased_tree1.keys()
    ['attr1', 'attr2']

    >>> len(aliased_tree1)
    2

    >>> aliased_tree1['uii'] = Node()
    Traceback (most recent call last):
    ...
    KeyError: 'uii'

The aliased nodes are named after their real name and the aliaser is not parent
but the real container is.

    >>> aliased_tree1['newattr'] = Node()
    >>> aliased_tree1['newattr']
    <Node object 'notthereyet' at ...>

    >>> aliased_tree1['newattr'].__parent__ is aliased_tree1
    False
    >>> aliased_tree1['newattr'].__parent__ is tree1
    True

    >>> aliased_tree1['newattr'].__name__
    'notthereyet'

    >>> 'newattr' in aliased_tree1
    True
    >>> 'notthereyet' in tree1
    True

    >>> [x for x in aliased_tree1]
    ['attr1', 'attr2', 'newattr']

    >>> aliased_tree1.keys()
    ['attr1', 'attr2', 'newattr']

    >>> len(aliased_tree1)
    3

Check invalid aliaser.

XXX: implement aliaser as setter getter property and initialize IDictAliaser
if IEnumerableMapping is set as value.
::
    >>> aliased_tree1.aliaser = Zodict(data=(('attr1_', 'attr1'),))
    >>> [x for x in aliased_tree1]
    Traceback (most recent call last):
      ...
    AttributeError: 'Zodict' object has no attribute 'alias'

Check Node attributes, they are a node themselves, IFullMapping and aliasing
are tested already for the node.
::
    >>> from zodict.node import LifecycleNode # XXX: provide attributes on
    ...                                       #      base nodes as well

    >>> node = LifecycleNode('node')
    >>> node.attrs
    <node.utils.AttributeAccess object at ...>

    >>> node.attrs.foo = 'bar'
    >>> node.attrs['foo']
    'bar'

    >>> node.attrs['bar'] = 'baz'
    >>> node.attrs.bar
    'baz'

    >>> node.attrs['oof'] = 'abc'
    >>> node.attrs.oof
    'abc'

    >>> node.attribute_access_for_attrs = False
    >>> node.attrs
    <LifecycleNodeAttributes object '__attrs__' at ...>

The attributes are stored as children of an attrs nodespace, which is stored in
the node.nodespaces['attrs']. It can be traversed to by the protected key
``__nodespaces__``
::
    >>> node.attrs.path
    ['node', '__attrs__']

    >>> node['__attrs__'] is node.attrs
    True

    >>> INode.providedBy(node.attrs)
    True

Attributes access is disabled, normal object behaviour applias. Beware!
::
    >>> node.attrs.foo = 'aaa'
    >>> node.attrs['foo']
    'bar'

    >>> node.attrs.bar
    Traceback (most recent call last):
    ...
    AttributeError: 'LifecycleNodeAttributes' object has no attribute 'bar'
    
#Check Node attribute aliases, with attribute access object.
#
#XXX: For now attributealiases needs to be set before attrs is called the first
#time, as attribute_access_for_attrs is currently enabled by default.
#::
#    >>> node = LifecycleNode()
#    >>> node.attribute_aliases = {
#    ...     'x': 'foo',
#    ...     'y': 'bar',
#    ...     }
#
#    >>> wrapper = node.attrs
#    >>> wrapper
#    <zodict._zodict.AttributeAccess object at ...>
#
#    >>> real_attrs = object.__getattribute__(wrapper, 'context')
#    >>> real_attrs
#    <LifecycleNodeAttributes object '__attrs__' at ...>
#
#    >>> real_attrs.aliases
#    {'y': 'bar', 'x': 'foo'}
#
#    >>> node.attrs.x
#    Traceback (most recent call last):
#    ...
#    AttributeError: x
#
#    >>> node.attrs.x = 1
#    >>> node.attrs.x
#    1
#
#    >>> node.attrs.y = 2
#    >>> node.attrs.y
#    2
#
#    >>> node.attrs.foo
#    Traceback (most recent call last):
#    ...
#    AttributeError: foo
#
#XXX This is broken and should return an error
#    >>> node.attrs.foo = 10

Check bool evaluation
::
    >>> node = Node()
    >>> node and True or False
    False

    >>> if not node:
    ...     print False
    False

    >>> node['1'] = Node()
    >>> node and True or False
    True

    >>> if node:
    ...     print True
    True

Nodespaces
----------

Every node is the root of at least one nodespaces, the children nodespace. A
nodespace is managed via IFullMapping. There are node implementations that have
further nodespaces, eg AttributedNode has one more namespace rooted at .attrs.

All nodespaces (including the child nodespace) are accessable via
node.nodespaces an ordered IFullMapping, it will be initialized on first call.
::
    >>> node = Node('node')
    >>> node.nodespaces
    odict([('__children__', <Node object 'node' at ...>)])

The children nodespace is the default nodespace, worked upon via the node's
IFullMapping API.
::
    >>> node.nodespaces['__children__'] is node
    True

XXX: Having __children__ in nodespaces is experimental and might dissappear at
one point.

The attrs nodespaces is created upon first access, we choose mapping API for
attrs (will be default from v2.1 on).
::
    >>> from zodict import AttributedNode
    >>> node = AttributedNode('anode')
    >>> node.nodespaces
    odict([('__children__', <AttributedNode object 'anode' at ...>)])

    >>> node.attribute_access_for_attrs = False
    >>> ignore = node.attrs
    >>> node.nodespaces
    odict([('__children__', <AttributedNode object 'anode' at ...>),
           ('__attrs__', <NodeAttributes object '__attrs__' at ...>)])

Special nodespaces are prefixed and suffixed with '__', like ``__attrs__``, and
are accessable via the node's ``__getitem__``, ``__setitem__`` and
``__delitem__``, but do not appear in any of the other IFullMapping methods.
::

    >>> node['__attrs__'] is node.attrs
    True

    >>> node['__foo__'] = foo = Node()
    >>> node['__foo__'] is foo
    True

    >>> node.keys()
    []

    >>> node.values()
    []

    >>> node.nodespaces
    odict([('__children__', <AttributedNode object 'anode' at ...>),
           ('__attrs__', <NodeAttributes object '__attrs__' at ...>),
           ('__foo__', <Node object '__foo__' at ...>)])

    >>> del node['__foo__']
    >>> node.nodespaces
    odict([('__children__', <AttributedNode object 'anode' at ...>),
           ('__attrs__', <NodeAttributes object '__attrs__' at ...>)])


The node will take parentship of nodespaces set via ``__setitem__``, like usual
for child nodes, which enables traversal and path.
::

    >>> foo.__name__
    '__foo__'
    >>> foo.__parent__ is node
    True

    >>> foo.path
    ['anode', '__foo__']

    >>> node.attrs.path
    ['anode', '__attrs__']

Further, you can put nodespaces directly into node.nodespaces to avoid taking
parentship and naming. Whether it makes sense to make them traversable, by
prefixing and suffixing with '__', but not to take parentship is up to you.
::
    >>> node.nodespaces['not_traversable'] = not_traversable = Node()
    >>> node.nodespaces['not_traversable'] is not_traversable
    True

    >>> not_traversable.__name__ is None
    True
    >>> not_traversable.__parent__ is None
    True

    >>> node['not_traversable']
    Traceback (most recent call last):
    ...
    KeyError: 'not_traversable'

    >>> node.nodespaces['__traversable__'] = traversable = Node()
    >>> node.nodespaces['__traversable__'] is traversable
    True

    >>> traversable.__name__ is None
    True
    >>> traversable.__parent__ is None
    True

    >>> node['__traversable__'] is traversable
    True

    >>> traversable.path
    [None]
